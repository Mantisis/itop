<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0">
  <constants>
  </constants>
  <classes>
	<class id="MailInboxStandard" _created_in="itop-standard-email-synchro" _delta="must_exist">
      <methods>
        <method id="GetTeamFromPerson" _delta="define_if_not_exists">
          <code><![CDATA[  public function GetTeamFromPerson(Person $oPerson){
				//récupère l'équipe de l'opérateur selectionné : Capio 1 opérateur est dans une seule équipe
				$oTeamSet = new DBObjectSet(DBSearch::FromOQL("SELECT Team  AS t JOIN lnkPersonToTeam AS l ON l.team_id=t.id WHERE l.person_id=:prs_id "),
						  array(),
						  array(
							'prs_id' => $oPerson->GetKey(),
							));
				$this->Trace("getteam");
				return $oTeamSet->Fetch();
                }]]>
        </code>
        </method>
			<method id="GetResponsable" _delta="define_if_not_exists">
				<code><![CDATA[ protected function GetResponsable(Organization $oOrgaDest,Organization $oOrgaCaller){
					//fonction pour rechercher le responsable à affecter
					$sOrgPrestataire = MetaModel::GetConfig()->GetModuleSetting('ait-ticket-autoaffectation', 'organisation_prestataire', '');
					//Si caller organization = prestataire
						if(preg_match('/\AP_(.*)$/i', $oOrgaCaller->Get('name')))
						{//on récupère le responsable de l'équipe recouvrement pour cette clinique
							$sql="SELECT Person  AS P JOIN lnkOrganizationToPerson AS l ON l.person_id=P.id 
								JOIN lnkPersonToTeam AS t ON t.person_id=P.id
								WHERE l.organization_id=:org_id AND t.team_name=:org_presta";
							
						}
						//sinon
						else
						{//on récupère le responsable de l'équipe pour cette clinique
							$sql="SELECT Person  AS P JOIN lnkOrganizationToPerson AS l ON l.person_id=P.id 
								JOIN lnkPersonToTeam AS t ON t.person_id=P.id
								WHERE l.organization_id=:org_id AND t.team_name!=:org_presta";
						}
					//récupération du respoonsable d'organisation
					$this->Trace("getresponsable".$sql."++".$oOrgaDest->GetKey()."++".$sOrgPrestataire);
					$oOrgRespSet = new DBObjectSet(DBSearch::FromOQL($sql),
							  array(),
							  array(
								'org_id' => $oOrgaDest->GetKey(),
								'org_presta'=>$sOrgPrestataire,
								));
					return $oOrgRespSet->Fetch();	
				}		]]>		
			</code>
		</method>
		<method id="GetCallerOrga" _delta="define_if_not_exists">
			<code>
				<![CDATA[
					protected function GetCallerOrga(Contact $oCaller){
					//fonction pour rechercher à quelle organisation appartient l'expediteur
						$sOrgName = MetaModel::GetConfig()->GetModuleSetting('ait-ticket-autoaffectation', 'organisation_default', '');
						if($oCaller){
								$this->Trace("caller".$oCaller->Get('org_id'));
								
								$oOrgSet = new DBObjectSet(DBSearch::FromOQL("SELECT Organization WHERE id=:org_id "),array(),
								  array(
									'org_id' => $oCaller->Get('org_id'),
									));
								//Fetching each organization returned by previous query
								$this->Trace("Fetching organization".$oOrgSet->Count());
								return($oOrganization = $oOrgSet->Fetch());
								
						}
						//si pas de caller trouvé, alors on considère que l'organisation est Z_Patient
						else{
								$this->Trace(" no caller");
								$oOrgSet = new DBObjectSet(DBSearch::FromOQL("SELECT Organization WHERE name=:org_name "),array(),
								  array(
									'org_name' => $sOrgName,
									));
								//Fetching each organization returned by previous query
								$this->Trace("Fetching organization".$oOrgSet->Count());
								return($oOrganization = $oOrgSet->Fetch());
								
						}	
					}
				]]>
			</code>
		</method>
                <method id="AfterInsertTicket" _delta="redefine">
				  <code><![CDATA[ /**
	 * Finalize the processing after the insertion of the ticket in the database
	 * @param Ticket $oTicket The ticket being written
	 * @param EmailMessage $oEmail The source email
	 * @param Contact $oCaller The caller for this ticket, as passed to CreateTicket
	 * @param array $aAddedAttachments The array of attachments added to the ticket
	 */
	protected function AfterInsertTicket(Ticket $oTicket, EmailMessage $oEmail, Contact $oCaller, $aAddedAttachments)
	{
		// Process attachments
		$this->UpdateAttachments($aAddedAttachments, $oTicket); // Now update the attachments since we know the ID of the ticket
		
		// Shall we delete the source email immediately?
		if ($this->Get('email_storage') == 'delete')
		{
			// Remove the processed message from the mailbox
			$this->Trace("Ticket created, deleting the source eMail '".$oEmail->sSubject."'");
			$this->SetNextAction(EmailProcessor::DELETE_MESSAGE);		
		}
		else
		{
			// Keep the message in the mailbox
			$this->SetNextAction(EmailProcessor::NO_ACTION);		
		}
		// Apply a stimulus if needed, will write the ticket to the database, may launch triggers, etc...
		$this->ApplyConfiguredStimulus($oTicket);
	}
		  ]]></code>
        </method>	
      </methods>
    </class>
  </classes>
  <menus>
  </menus>
  <user_rights>
    <groups>
    </groups>
    <profiles>
    </profiles>
  </user_rights>
</itop_design>
